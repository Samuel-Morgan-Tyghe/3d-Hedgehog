{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Box","props","mesh","useRef","useState","hovered","setHover","active","setActive","useFrame","state","delta","current","rotation","x","ref","scale","onClick","event","onPointerOver","onPointerOut","args","color","App","className","position","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAIA,SAASA,EAAIC,GAEX,IAAMC,EAAOC,mBAFK,EAIUC,oBAAS,GAJnB,mBAIXC,EAJW,KAIFC,EAJE,OAKUF,oBAAS,GALnB,mBAKXG,EALW,KAKHC,EALG,KASlB,OAFAC,aAAS,SAACC,EAAOC,GAAR,OAAmBT,EAAKU,QAAQC,SAASC,GAAK,OAGrD,iDACMb,GADN,IAEEc,IAAKb,EACLc,MAAOT,EAAS,IAAM,EACtBU,QAAS,SAACC,GAAD,OAAWV,GAAWD,IAC/BY,cAAe,SAACD,GAAD,OAAWZ,GAAS,IACnCc,aAAc,SAACF,GAAD,OAAWZ,GAAS,IANpC,UAQE,6BAAae,KAAM,CAAC,EAAG,EAAG,KAC1B,sCAAsBC,MAAOjB,EAAU,UAAY,eAoB1CkB,MAff,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,eAAC,IAAD,WACE,iCACA,4BAAYC,SAAU,CAAC,GAAI,GAAI,MAC/B,cAACzB,EAAD,CAAKyB,SAAU,EAAE,IAAK,EAAG,KACzB,cAACzB,EAAD,CAAKyB,SAAU,CAAC,IAAK,EAAG,aCxBnBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3746e3dc.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { useRef, useState } from \"react\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\n\nfunction Box(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n  // Set up state for the hovered and active state\n  const [hovered, setHover] = useState(false);\n  const [active, setActive] = useState(false);\n  // Subscribe this component to the render-loop, rotate the mesh every frame\n  useFrame((state, delta) => (mesh.current.rotation.x += 0.01));\n  // Return view, these are regular three.js elements expressed in JSX\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={active ? 5.5 : 5}\n      onClick={(event) => setActive(!active)}\n      onPointerOver={(event) => setHover(true)}\n      onPointerOut={(event) => setHover(false)}\n    >\n      <boxGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? \"hotpink\" : \"orange\"} />\n    </mesh>\n  );\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Canvas>\n          <ambientLight />\n          <pointLight position={[10, 10, 10]} />\n          <Box position={[-1.2, 0, 0]} />\n          <Box position={[1.2, 0, 0]} />\n        </Canvas>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}